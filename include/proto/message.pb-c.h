/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: message.proto */

#ifndef PROTOBUF_C_message_2eproto__INCLUDED
#define PROTOBUF_C_message_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct AuthProto AuthProto;
typedef struct QueryHeader QueryHeader;
typedef struct QueryProto QueryProto;
typedef struct ReplyHeader ReplyHeader;
typedef struct ReplyProto ReplyProto;


/* --- enums --- */


/* --- messages --- */

struct  AuthProto
{
  ProtobufCMessage base;
  char *token;
  int32_t token_len;
  ProtobufCBinaryData authorization;
};
#define AUTH_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&auth_proto__descriptor) \
    , (char *)protobuf_c_empty_string, 0, {0,NULL} }


struct  QueryHeader
{
  ProtobufCMessage base;
  char *host;
  char *user_agent;
  ProtobufCBinaryData authorization;
  char *content_type;
};
#define QUERY_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&query_header__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, (char *)protobuf_c_empty_string }


struct  QueryProto
{
  ProtobufCMessage base;
  QueryHeader *header;
  ProtobufCBinaryData body;
};
#define QUERY_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&query_proto__descriptor) \
    , NULL, {0,NULL} }


struct  ReplyHeader
{
  ProtobufCMessage base;
  char *server;
  char *content_type;
};
#define REPLY_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reply_header__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  ReplyProto
{
  ProtobufCMessage base;
  int32_t status;
  char *status_text;
  ReplyHeader *header;
  ProtobufCBinaryData body;
};
#define REPLY_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reply_proto__descriptor) \
    , 0, (char *)protobuf_c_empty_string, NULL, {0,NULL} }


/* AuthProto methods */
void   auth_proto__init
                     (AuthProto         *message);
size_t auth_proto__get_packed_size
                     (const AuthProto   *message);
size_t auth_proto__pack
                     (const AuthProto   *message,
                      uint8_t             *out);
size_t auth_proto__pack_to_buffer
                     (const AuthProto   *message,
                      ProtobufCBuffer     *buffer);
AuthProto *
       auth_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   auth_proto__free_unpacked
                     (AuthProto *message,
                      ProtobufCAllocator *allocator);
/* QueryHeader methods */
void   query_header__init
                     (QueryHeader         *message);
size_t query_header__get_packed_size
                     (const QueryHeader   *message);
size_t query_header__pack
                     (const QueryHeader   *message,
                      uint8_t             *out);
size_t query_header__pack_to_buffer
                     (const QueryHeader   *message,
                      ProtobufCBuffer     *buffer);
QueryHeader *
       query_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   query_header__free_unpacked
                     (QueryHeader *message,
                      ProtobufCAllocator *allocator);
/* QueryProto methods */
void   query_proto__init
                     (QueryProto         *message);
size_t query_proto__get_packed_size
                     (const QueryProto   *message);
size_t query_proto__pack
                     (const QueryProto   *message,
                      uint8_t             *out);
size_t query_proto__pack_to_buffer
                     (const QueryProto   *message,
                      ProtobufCBuffer     *buffer);
QueryProto *
       query_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   query_proto__free_unpacked
                     (QueryProto *message,
                      ProtobufCAllocator *allocator);
/* ReplyHeader methods */
void   reply_header__init
                     (ReplyHeader         *message);
size_t reply_header__get_packed_size
                     (const ReplyHeader   *message);
size_t reply_header__pack
                     (const ReplyHeader   *message,
                      uint8_t             *out);
size_t reply_header__pack_to_buffer
                     (const ReplyHeader   *message,
                      ProtobufCBuffer     *buffer);
ReplyHeader *
       reply_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reply_header__free_unpacked
                     (ReplyHeader *message,
                      ProtobufCAllocator *allocator);
/* ReplyProto methods */
void   reply_proto__init
                     (ReplyProto         *message);
size_t reply_proto__get_packed_size
                     (const ReplyProto   *message);
size_t reply_proto__pack
                     (const ReplyProto   *message,
                      uint8_t             *out);
size_t reply_proto__pack_to_buffer
                     (const ReplyProto   *message,
                      ProtobufCBuffer     *buffer);
ReplyProto *
       reply_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reply_proto__free_unpacked
                     (ReplyProto *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*AuthProto_Closure)
                 (const AuthProto *message,
                  void *closure_data);
typedef void (*QueryHeader_Closure)
                 (const QueryHeader *message,
                  void *closure_data);
typedef void (*QueryProto_Closure)
                 (const QueryProto *message,
                  void *closure_data);
typedef void (*ReplyHeader_Closure)
                 (const ReplyHeader *message,
                  void *closure_data);
typedef void (*ReplyProto_Closure)
                 (const ReplyProto *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor auth_proto__descriptor;
extern const ProtobufCMessageDescriptor query_header__descriptor;
extern const ProtobufCMessageDescriptor query_proto__descriptor;
extern const ProtobufCMessageDescriptor reply_header__descriptor;
extern const ProtobufCMessageDescriptor reply_proto__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_message_2eproto__INCLUDED */
